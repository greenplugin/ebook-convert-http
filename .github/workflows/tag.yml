name: Create Tag

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for the new tag (e.g., 1.0.0)'
        required: true
  push:
    branches:
      - master

jobs:
  create_tag:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    name: Create a new tag
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set tag user info
        id: user_info
        run: |
          echo "user_name=${{ github.actor }}" >> $GITHUB_ENV
          echo "user_email=${{ github.event.sender.email }}" >> $GITHUB_ENV

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ env.user_name }}"
          git config user.email "${{ env.user_email }}"
          git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

  auto_tag:
    if: ${{ github.event_name == 'push' }}
    name: Auto-create tag
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract commit author information
        id: commit_info
        run: |

          last_author_name=$(git log -1 --pretty="%an")
          last_author_email=$(git log -1 --pretty="%ae")

          echo "commit_author_name=$last_author_name" >> $GITHUB_ENV
          echo "commit_author_email=$last_author_email" >> $GITHUB_ENV

      - name: Decide Bump Type (MAJOR, MINOR, PATCH)
        id: bump_type
        run: |
          bump="PATCH"

          commit_message=$(git log -1 --pretty=%B)

          if echo "$commit_message" | grep -qi "^feat:.*BREAKING CHANGE"; then
            bump="MAJOR"
          elif echo "$commit_message" | grep -qi "^feat:"; then
            bump="MINOR"
          elif echo "$commit_message" | grep -qi "^fix:"; then
            bump="PATCH"
          else
            echo "⚠️ Warning: Commit message does not follow Conventional Commits. Defaulting to PATCH."
          fi

          echo "bump=$bump" >> $GITHUB_ENV

      - name: Find the latest version tag
        id: get_latest_tag
        run: |
          all_tags=$(git tag -l | sort -V)
          echo -e "All tags found in the repository:\n$all_tags"
          
          semver_tags=$(echo "$all_tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || true)
          echo -e "SemVer-compatible tags:\n$semver_tags"

          latest_tag=$(echo "$semver_tags" | tail -n1)
          
          if [ -z "$latest_tag" ]; then
            latest_tag="0.0.0"
            echo "⚠️ No SemVer tags found, starting from $latest_tag"
          else
            echo "✅ Latest SemVer tag found: $latest_tag"
          fi

          IFS='.' read -r -a version_parts <<< "$latest_tag"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
           case "${{ env.bump }}" in
            MAJOR)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            MINOR)
              minor=$((minor + 1))
              patch=0
              ;;
            PATCH)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="${major}.${minor}.${new_patch}"

          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Automatically create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ env.commit_author_name }}"
          git config user.email "${{ env.commit_author_email }}"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}